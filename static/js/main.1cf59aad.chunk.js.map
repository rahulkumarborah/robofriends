{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","className","src","alt","CardList","robots","map","robot","index","key","id","Searchbox","onSearchChange","type","placeholder","onChange","Scroll","style","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","React","Component","App","useState","setRobots","searchValue","setSearchValue","useEffect","fetch","then","response","json","data","length","filteredRobots","filter","toLowerCase","includes","event","value","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"6NAeeA,MAbf,SAAeC,GAAO,IACdC,EAAYD,EAAZC,KAAKC,EAAOF,EAAPE,MACT,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAG,+BAA0BH,EAA1B,iBAA+CI,IAAI,iBAC3D,6BACR,4BAAKJ,GACL,2BAAIC,MCOOI,MAZf,YAA4B,IAATC,EAAQ,EAARA,OACf,OAAO,oCACFA,EAAOC,KAAI,SAACC,EAAMC,GACf,OAAO,kBAAC,EAAD,CACKC,IAAG,UAAKF,EAAMG,GAAX,YAAiBF,GACpBT,KAAMQ,EAAMR,KACZC,MAAOO,EAAMP,aCKtBW,MAbf,YAAqC,IAAjBC,EAAgB,EAAhBA,eAChB,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,MARf,SAAgBlB,GACZ,OACI,yBAAKmB,MAAO,CAAC,UAAY,SAAUC,OAAO,kBAAmBC,OAAO,UAC/DrB,EAAMsB,W,mCC0BJC,E,YA5BX,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KACDwB,MAAQ,CAAEC,UAAU,GAFR,E,+EAYDC,EAAOC,GAGvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAIG,KAAKJ,MAAMC,SAEN,qDAGFG,KAAK5B,MAAMsB,Y,gDAlBYI,GAE9B,MAAO,CAAED,UAAU,O,GATGK,IAAMC,WCuCnBC,MAjCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACN1B,EADM,KACE2B,EADF,OAEyBD,mBAAS,IAFlC,mBAENE,EAFM,KAEOC,EAFP,KAeb,GAXAC,qBAAU,WACRC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAER,EAAUQ,QACtB,IAOiB,IAAhBnC,EAAOoC,OACR,OAAO,wBAAIxC,UAAU,MAAd,cAEP,IAAMyC,EAAiBrC,EAAOsC,QAAO,SAACpC,GAAD,OAASA,EAAMR,KAAK6C,cAAcC,SAASZ,EAAYW,kBAC5F,OACE,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,eAZM,SAACkC,GACtB,IAAMC,EAAQD,EAAME,OAAOD,MAC3Bb,EAAea,MAWX,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU1C,OAAQqC,QCrBVO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLwC,QAAQxC,MAAMA,EAAMyC,a","file":"static/js/main.1cf59aad.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Card (props){\r\n\tconst {name,email}=props\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${name}?size=200x200`} alt=\"Robot Avatar\"/>\r\n            <div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n\r\nfunction CardList({robots}){\r\n    return <>\r\n        {robots.map((robot,index)=>{\r\n            return <Card \r\n                        key={`${robot.id}-${index}`}\r\n                        name={robot.name}\r\n                        email={robot.email}\r\n                    />\r\n        })}\r\n    </>\r\n}\r\n\r\nexport default CardList","import React from \"react\";\r\n\r\nfunction Searchbox({onSearchChange}){\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input \r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"Search Robots\"\r\n                onChange={onSearchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React from \"react\";\r\n\r\nfunction Scroll(props){\r\n    return (\r\n        <div style={{\"overflowX\":\"scroll\", border:\"1px solid black\", height:\"500px\"}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n  \r\n    // called during render, avoid side effect \r\n    static getDerivedStateFromError(error) {\r\n      // Update state so the next render will show the fallback UI.\r\n      return { hasError: true };\r\n    }\r\n  \r\n    // called after render. can include side effects\r\n    componentDidCatch(error, errorInfo) {\r\n      // You can also log the error to an error reporting service\r\n      // logErrorToMyService(error, errorInfo);\r\n      this.setState({hasError:true})\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        // You can render any custom fallback UI\r\n        return <h1>Something went wrong.</h1>;\r\n      }\r\n  \r\n      return this.props.children; \r\n    }\r\n  }\r\n\r\nexport default ErrorBoundary;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport CardList from '../../components/CardList';\nimport Searchbox from \"../../components/Searchbox\";\nimport Scroll from '../../components/Scroll';\nimport ErrorBoundary from \"../../components/ErrorBoundary\";\n\n\nfunction App() {\n  const [robots, setRobots] = useState([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  useEffect(()=>{\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response=> response.json())\n    .then(data=>setRobots(data))\n  },[])\n\n  const onSearchChange = (event) =>{\n    const value = event.target.value;\n    setSearchValue(value);\n  }\n\n  if(robots.length===0){\n    return <h1 className=\"tc\">Loading...</h1>\n  }else{\n    const filteredRobots = robots.filter((robot)=>robot.name.toLowerCase().includes(searchValue.toLowerCase()));\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <Searchbox onSearchChange={onSearchChange}/>\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots}/>\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}